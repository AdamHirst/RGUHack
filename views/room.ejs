<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="https://fonts.googleapis.com/css?family=Titillium+Web:200,300,400" rel="stylesheet">
    <link rel="stylesheet" href="css/style.css">
    <title>transcri.me | #<%= room %></title>
    
    <script src='https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.css' rel='stylesheet' />
    <script type="text/javascript">

        var socket;

        // The Browser API key obtained from the Google API Console.
        // Replace with your own Browser API key, or your own key.
        var developerKey = 'AIzaSyA1HMIP6m3QlUSEUGN40qIvx-debJDlWXw';
    
        // The Client ID obtained from the Google API Console. Replace with your own Client ID.
        var clientId = "998277289939-80n1rq3l9uhjr643ugutnedj2ln01st6.apps.googleusercontent.com"
    
        // Replace with your own project number from console.developers.google.com.
        // See "Project number" under "IAM & Admin" > "Settings"
        var appId = "998277289939";
    
        // Scope to use to access user's Drive items.
        var scope = ['https://www.googleapis.com/auth/drive'];
    
        var pickerApiLoaded = false;
        var oauthToken;
    
        // Use the Google API Loader script to load the google.picker script.
        function loadPicker() {
          gapi.load('auth', {'callback': onAuthApiLoad});
          gapi.load('picker', {'callback': onPickerApiLoad});
        }

        function resLoaded() {
            console.log('GPicker API loaded.');   
        }
    
        function onAuthApiLoad() {
          window.gapi.auth.authorize(
              {
                'client_id': clientId,
                'scope': scope,
                'immediate': false
              },
              handleAuthResult);
        }
    
        function onPickerApiLoad() {
          pickerApiLoaded = true;
          createPicker();
        }
    
        function handleAuthResult(authResult) {
          if (authResult && !authResult.error) {
            oauthToken = authResult.access_token;
            createPicker();
          }
        }

        // Create and render a Picker object for searching images.
        function createPicker() {
          if (pickerApiLoaded && oauthToken) {
            var view = new google.picker.View(google.picker.ViewId.DOCS);
            var picker = new google.picker.PickerBuilder()
                .enableFeature(google.picker.Feature.NAV_HIDDEN)
                .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
                .setAppId(appId)
                .setOAuthToken(oauthToken)
                .addView(view)
                .addView(new google.picker.DocsUploadView())
                .setDeveloperKey(developerKey)
                .setCallback(pickerCallback)
                .build();
             picker.setVisible(true);
          }
        }
    
        // A simple callback implementation.
        function pickerCallback(data) {
          if (data.action == google.picker.Action.PICKED) {
              console.log('Emitting file event');
              console.log(socket);
            socket.emit('file', { name: data.docs[0].name, url: data.docs[0].url })
          }
        }
        </script>
</head>
<body>
        <div class="content">
            <h1 class="title">transcri.me</h1>
            <h2 class="subtitle">the web based collaborative dictation service</h2>
            <div class="header">
                You joined #<%= room %> with <span id="nusers">0</span> others:
                <div class="online" id="online-users"></div>
            </div>

            <div id="output">
                <span id="final"></span>
                <span id="temp"></span>
            </div>

            <div class="footer-actions" style="width: fit-content;margin: 40px auto;margin-bottom: 10px;">
                    <button style="
                    /* width: calc(50% - 40px); */
                    border: none;
                    background-color: #eee;
                    font-size: 16px;
                    font-weight: 200;
                    border: #000 solid 1px;
                    border-radius: 20px;
                    padding: 20px 30px;
                    margin: 0 10px;
                    display: inline-block;
                " onclick="uploadFile();"><img src="/img/upload.png" style="
                    height: 23px;
                    margin-right: 15px;
                    vertical-align: middle;
                    margin-top: -4px;
                ">Upload a file</button>
                <button style="
                    /* width: calc(50% - 40px); */
                    border: none;
                    background-color: #eee;
                    font-size: 16px;
                    font-weight: 200;
                    border: #000 solid 1px;
                    border-radius: 20px;
                    padding: 20px 30px;
                    margin: 0 10px;
                    display: inline-block;
                " onclick="downloadPdf();"><img src="/img/download.png" style="
                    height: 23px;
                    margin-right: 15px;
                    vertical-align: middle;
                    margin-top: -4px;
                ">Download transcript</button></div>
        </div>

        <script src="./js/transcri.me.js"></script>
        <script src="/socket.io/socket.io.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js"></script>
        <script type="text/javascript" src="https://apis.google.com/js/api.js?onload=resLoaded"></script>
        <script>
            socket = io();

            var roomName = "<%= room %>";
            var name = "<%= profile.name.givenName %>";
            var fullName = "<%= profile.displayName %>";
            var photo = "<%= profile.photos[0].value %>";
            var mapN = 0;

            socket.emit('join room', { name: name, photo: photo, roomId: roomName, fullName: fullName })

            startTranscribing(socket);

            function getMessageTemplate(id, message, author) {
                return `<div class="card"><div class="card-image" style="background-image:url('${author.photo}');"></div> <div class="card-content"><div class="card-title">${author.name}</div><div id="message-${id}">${message}</div></div></div>`;
            }

            function getUserMessageTemplate(id, message, author) {
                return `<div class="card card-rtl"><div class="card-image" style="background-image:url('${author.photo}');"></div><div class="card-content"><div class="card-title">${author.name}</div><div id="message-${id}">${message}</div></div></div>`;
            }

            function getFileTemplate(link, title, uploader) {
                return `<a class="nostyle" href="${link}"><div class="card file-card">
<div class="><div class="card-image" style="background-image: url('/img/doc.png');border-radius: 0;border:  none;/* padding: 1px; */margin: 5px;"></div><div class="card-content" style="
    /* border-radius: 20px; */
"><div class="card-title">${title}</div><div id="message-22">${uploader.name} uploaded a file</div></div></div></a>`;
            }

            function getUserFileTemplate(link, title, uploader) {
                return `<a class="nostyle" href="${link}"><div class="card file-card card-rtl">
<div class="><div class="card-image" style="background-image: url('/img/doc.png');border-radius: 0;border:  none;/* padding: 1px; */margin: 5px; background-size: cover; width: 60px;"></div><div class="card-content" style="
    /* border-radius: 20px; */
"><div class="card-title">${title}</div><div id="message-22">${uploader.name} uploaded a file</div></div></div></a>`;
            }
 
            socket.on('online users', (data) => {
                var keys = Object.keys(data.users);
                $("#nusers").text(keys.length-1);
                keys.forEach(key => {   
                    var user = data.users[key];
                    $("#online-users").append(`<div class="icon" style="background-image: url('${user.photo}');"></div>`) 
                });
            });

            socket.on('interim update', (data) => {
                // Try to find the associated div
                var el = document.getElementById('message-' + data.id);

                console.log(el);

                if (el == null) {
                    // Create the element
                    if (data.target == socket.id) {
                        $('#output').append(getUserMessageTemplate(data.id, data.string, data.user));
                        el = document.getElementById('message-' + data.id);
                    } else {
                        $('#output').append(getMessageTemplate(data.id, data.string, data.user));
                        el = document.getElementById('message-' + data.id);
                    }
                } else {
                    $('#message-' + data.id).text(data.string +  "...");
                }
                
                el.scrollIntoView();
            });

            socket.on('final update', (data) => {
                // Try to find the associated div
                var el = document.getElementById('message-' + data.id);

                console.log('Final: ' + data.string);

                if (el == null) {
                    // Create the element
                    if (data.target == socket.id) {
                        $('#output').append(getUserMessageTemplate(data.id, data.string, data.user));
                        el = document.getElementById('message-' + data.id);
                    } else {
                        $('#output').append(getMessageTemplate(data.id, data.string, data.user));
                        el = document.getElementById('message-' + data.id);
                    }
                } else {
                    $('#message-' + data.id).html(data.string);
                }
 
                el.scrollIntoView();
            });

            socket.on('show map', (data) => {
                $('#output').append(`<div class="map" id='map-${mapN++}'></div>`);
                mapboxgl.accessToken = 'pk.eyJ1IjoiYWhyZ3VoYWNrIiwiYSI6ImNqZzA4OGptNzBucWsyem54bWR2Mjd0cmcifQ.B88XcOovHjXGXH9ocy1mJg';
                var map = new mapboxgl.Map({
                    container: 'map-' + (mapN-1),
                    style: 'mapbox://styles/mapbox/dark-v9',
                    center: [-2.446, 57.75],
                    zoom: 5
                }) // 57.7500317,-2.4460594,7.24z

                map.on('load', function() {
                    var geojson = {
                        "type": "FeatureCollection",
                        "crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },
                        "features": [],
                    }

                    data.ships.forEach((ship) => {
                        geojson.features.push({
                            type: "Feature",
                            properties: { "name": ship.Name, "mmsi": ship.MMSI },
                            geometry: {
                                type: "Point",
                                coordinates: ship.lastPos.location
                            }
                        })
                    });
                    
                    map.addSource('ships', {
                        type: 'geojson',
                        data: geojson,
                    });

                    map.addLayer({
                        id: 'ships-heat',
                        type: "heatmap",
                        source: 'ships',
                        "maxzoom": 9,
                        "paint": {
                            // Increase the heatmap color weight weight by zoom level
                            // heatmap-intensity is a multiplier on top of heatmap-weight
                            "heatmap-intensity": [
                                "interpolate",
                                ["linear"],
                                ["zoom"],
                                0, 1,
                                9, 3
                            ],
                            // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).
                            // Begin color ramp at 0-stop with a 0-transparancy color
                            // to create a blur-like effect.
                            "heatmap-color": [
                                "interpolate",
                                ["linear"],
                                ["heatmap-density"],
                                0, "rgb(47, 85, 104)",
                                0.2, "rgb(53, 109, 137)",
                                0.4, "rgb(55, 127, 163)",
                                0.6, "rgb(52, 143, 188)",
                                0.8, "rgb(47, 167, 226)",
                                1, "rgb(9, 167, 244)"
                            ],
                            // Adjust the heatmap radius by zoom level
                            "heatmap-radius": [
                                "interpolate",
                                ["linear"],
                                ["zoom"],
                                0, 2,
                                9, 20
                            ],
                            // Transition from heatmap to circle layer by zoom level
                            "heatmap-opacity": [
                                "interpolate",
                                ["linear"],
                                ["zoom"],
                                7, 1,
                                9, 0
                            ],
                        }
                    }, 'waterway-label');

                    map.addLayer({
                        "id": "ships-point",
                        "type": "circle",
                        "source": "ships",
                        "minzoom": 7,
                        "paint": {
                            // Size circle radius by earthquake magnitude and zoom level
                            "circle-radius": [
                                "interpolate",
                                ["linear"],
                                ["zoom"],
                                7, [
                                    "interpolate",
                                    ["linear"],
                                    ["get", "mag"],
                                    1, 1,
                                    6, 4
                                ],
                                16, [
                                    "interpolate",
                                    ["linear"],
                                    ["get", "mag"],
                                    1, 5,
                                    6, 50
                                ]
                            ],
                            // Color circle by earthquake magnitude
                            "circle-color": "white",
                            "circle-stroke-color": "white",
                            "circle-stroke-width": 1,
                            // Transition from heatmap to circle layer by zoom level
                            "circle-opacity": [
                                "interpolate",
                                ["linear"],
                                ["zoom"],
                                7, 0,
                                8, 1
                            ]
                        }
                    }, 'waterway-label');
                })
            });

            socket.on('user joined', (data) => {
                $('#output').append('<p class="centered-text">' + data.user.fullName + ' has joined the room</p>');
            });

            socket.on('user left', (data) => {
                $('#output').append('<p class="centered-text">' + data.user.fullName + ' has left the room</p>');
            });

            socket.on('file upload', (data) => {
                if (data.target == socket.id) {
                    $('#output').append(getUserFileTemplate(data.url, data.name, data.uploader));
                } else {
                    $('#output').append(getFileTemplate(data.url, data.name, data.uploader));
                }
            });

            function uploadFile() {
                loadPicker();
            }
        </script>
</body>
</html>